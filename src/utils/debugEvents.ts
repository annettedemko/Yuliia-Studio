import { supabase } from '@/lib/supabase';

export const debugEventsTable = async () => {
  console.log('=== EVENTS TABLE DEBUGGING ===');

  try {
    // 1. –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–∞–±–ª–∏—Ü–µ
    console.log('1. Testing basic table access...');
    const { data: basicTest, error: basicError } = await supabase
      .from('events')
      .select('count');

    if (basicError) {
      console.error('‚ùå Basic table access failed:', basicError);
      return;
    }
    console.log('‚úÖ Basic table access OK:', basicTest);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    console.log('2. Checking table structure...');
    const { data: structureTest, error: structureError } = await supabase
      .from('events')
      .select('*')
      .limit(1);

    if (structureError) {
      console.error('‚ùå Structure check failed:', structureError);
    } else {
      console.log('‚úÖ Table structure OK. Sample row:', structureTest?.[0] || 'No data');
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    console.log('3. Checking row count...');
    const { count, error: countError } = await supabase
      .from('events')
      .select('*', { count: 'exact', head: true });

    if (countError) {
      console.error('‚ùå Count check failed:', countError);
    } else {
      console.log(`‚úÖ Total events in table: ${count}`);
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º is_published —Ñ–∏–ª—å—Ç—Ä
    console.log('4. Checking is_published filter...');
    const { data: publishedEvents, error: publishedError } = await supabase
      .from('events')
      .select('*')
      .eq('is_published', true);

    if (publishedError) {
      console.error('‚ùå Published filter failed:', publishedError);
    } else {
      console.log(`‚úÖ Published events: ${publishedEvents?.length || 0}`);
      console.log('Published events data:', publishedEvents);
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º date —Ñ–∏–ª—å—Ç—Ä - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π
    console.log('5. Checking date filter...');
    const today = new Date().toISOString().split('T')[0];
    console.log('Today date string:', today);

    const { data: futureEvents, error: dateError } = await supabase
      .from('events')
      .select('*')
      .gte('date', today);

    if (dateError) {
      console.error('‚ùå Date filter failed:', dateError);
    } else {
      console.log(`‚úÖ Future events: ${futureEvents?.length || 0}`);
      console.log('Future events data:', futureEvents);
    }

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
    console.log('6. Checking combined filter (published + future)...');
    const { data: combinedEvents, error: combinedError } = await supabase
      .from('events')
      .select('*')
      .eq('is_published', true)
      .gte('date', today)
      .order('date', { ascending: true });

    if (combinedError) {
      console.error('‚ùå Combined filter failed:', combinedError);
    } else {
      console.log(`‚úÖ Published future events: ${combinedEvents?.length || 0}`);
      console.log('Combined events data:', combinedEvents);
    }

    // 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º insert –ø—Ä–∞–≤–∞
    console.log('7. Testing insert permissions...');
    const testEvent = {
      title: 'Test Event Debug',
      date: '2025-12-31',
      time: '23:59',
      location: 'Test Location',
      description: 'Test Description',
      is_published: true
    };

    const { data: insertTest, error: insertError } = await supabase
      .from('events')
      .insert(testEvent)
      .select()
      .maybeSingle();

    if (insertError) {
      console.error('‚ùå Insert test failed:', insertError);
    } else {
      console.log('‚úÖ Insert test successful:', insertTest);

      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
      if (insertTest?.id) {
        await supabase.from('events').delete().eq('id', insertTest.id);
        console.log('üóëÔ∏è Test event cleaned up');
      }
    }

    // 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏ RLS
    console.log('8. Checking RLS policies...');
    const { data: anonTest, error: anonError } = await supabase
      .from('events')
      .select('*')
      .limit(1);

    if (anonError) {
      console.error('‚ùå Anonymous access failed:', anonError);
    } else {
      console.log('‚úÖ Anonymous access OK');
    }

  } catch (error) {
    console.error('üí• Debug function crashed:', error);
  }

  console.log('=== DEBUG COMPLETE ===');
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
export const checkEventDataTypes = () => {
  console.log('=== DATA TYPE ANALYSIS ===');

  // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤ –ë–î (—É–∫–∞–∑–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
  const dbStructure = {
    id: 'uuid (PK, gen_random_uuid())',
    title: 'text NOT NULL',
    date: 'date (–º–æ–∂–µ—Ç –±—ã—Ç—å NULL)',
    time: 'text NULL',
    location: 'text NULL',
    address: 'text NULL',
    description: 'text NULL',
    is_published: 'boolean (default true)',
    created_at: 'timestamptz (default now())',
    updated_at: 'timestamptz (default now())',
    user_id: 'uuid NULL'
  };

  // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤ TypeScript
  const tsStructure = {
    id: 'string',
    title: 'string',
    date: 'string | null',
    time: 'string | null',
    location: 'string | null',
    address: 'string | null',
    description: 'string | null',
    is_published: 'boolean',
    created_at: 'string',
    updated_at: 'string'
    // user_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ TS —Ç–∏–ø–∞—Ö!
  };

  console.log('DB Structure:', dbStructure);
  console.log('TS Structure:', tsStructure);

  // –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
  console.log('üö® POTENTIAL ISSUES:');
  console.log('1. user_id field missing in TypeScript types');
  console.log('2. date field: DB uses DATE type, TS uses string - could cause comparison issues');
  console.log('3. timestamp fields: DB uses timestamptz, TS uses string - should be OK');

  console.log('=== TYPE ANALYSIS COMPLETE ===');
};
import { supabase } from '@/lib/supabase'

export interface SimpleAuthUser {
  id: string
  email: string
  role: string
}

const SUPABASE_URL = 'https://knmompemjlboqzwcycwe.supabase.co'
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtubW9tcGVtamxib3F6d2N5Y3dlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg3OTUzNjQsImV4cCI6MjA3NDM3MTM2NH0.j4db0ohPVgWLHUGF_Cdd1v33j7ggj375_FTpaizr8gM'

class SimpleAuthService {
  private currentUser: SimpleAuthUser | null = null

  async login(email: string, password: string): Promise<{ user: SimpleAuthUser | null, error: string | null }> {
    try {
      console.log('üü° SimpleAuth: –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å email:', email);
      const startTime = Date.now();

      // DIRECT REST API CALL - –æ–±—Ö–æ–¥ Supabase JS SDK
      console.log('üü° SimpleAuth: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π REST API –∑–∞–ø—Ä–æ—Å...');
      const response = await fetch(`${SUPABASE_URL}/auth/v1/token?grant_type=password`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'apikey': SUPABASE_ANON_KEY,
          'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
        },
        body: JSON.stringify({
          email,
          password
        })
      });

      const elapsed = Date.now() - startTime;
      console.log(`üü° SimpleAuth: REST API –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ ${elapsed}ms`);

      if (!response.ok) {
        const errorData = await response.json();
        console.log('üî¥ SimpleAuth: REST API –æ—à–∏–±–∫–∞:', errorData);
        return { user: null, error: errorData.error_description || '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' }
      }

      const data = await response.json();
      console.log('üü° SimpleAuth: REST API –æ—Ç–≤–µ—Ç:', data);

      if (!data.user) {
        console.log('üî¥ SimpleAuth: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return { user: null, error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' }
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userRole = data.user.user_metadata?.role || data.user.raw_user_meta_data?.role || 'viewer';

      this.currentUser = {
        id: data.user.id,
        email: data.user.email || '',
        role: userRole
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º access_token –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      if (data.access_token) {
        localStorage.setItem('supabase.auth.token', data.access_token);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      localStorage.setItem('simpleAuth', JSON.stringify(this.currentUser));

      console.log('üü¢ SimpleAuth: –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:', this.currentUser);
      return { user: this.currentUser, error: null }

    } catch (error) {
      console.error('üî¥ SimpleAuth: –û—à–∏–±–∫–∞:', error);
      return { user: null, error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞' }
    }
  }

  async logout() {
    this.currentUser = null
    localStorage.removeItem('simpleAuth')
    localStorage.removeItem('supabase.auth.token')

    // –¢–∞–∫–∂–µ –≤—ã—Ö–æ–¥–∏–º –∏–∑ Supabase auth
    await supabase.auth.signOut()
  }

  async getCurrentUser(): Promise<SimpleAuthUser | null> {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ localStorage (–±—ã—Å—Ç—Ä–æ)
      const cachedUser = localStorage.getItem('simpleAuth')
      if (cachedUser) {
        try {
          this.currentUser = JSON.parse(cachedUser)
          console.log('üü° SimpleAuth: –ò—Å–ø–æ–ª—å–∑—É–µ–º cached user:', this.currentUser)

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π token
          const token = localStorage.getItem('supabase.auth.token')
          if (token) {
            console.log('üü¢ SimpleAuth: –ï—Å—Ç—å cached token, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º cached user')
            return this.currentUser
          }
        } catch (e) {
          console.warn('üü° SimpleAuth: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ cached user')
        }
      }

      // –ï—Å–ª–∏ –Ω–µ—Ç cached user –∏–ª–∏ token - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null (–Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω)
      console.log('üü° SimpleAuth: –ù–µ—Ç cached user –∏–ª–∏ token');
      this.currentUser = null
      localStorage.removeItem('simpleAuth')
      return null

    } catch (error) {
      console.error('üî¥ SimpleAuth: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
      // –ï—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –Ω–æ –µ—Å—Ç—å cached user - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
      if (this.currentUser) {
        console.log('üü° SimpleAuth: –ò—Å–ø–æ–ª—å–∑—É–µ–º cached user –ø–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è')
        return this.currentUser
      }
      this.currentUser = null
      localStorage.removeItem('simpleAuth')
      return null
    }
  }

  async isAdmin(): Promise<boolean> {
    const user = await this.getCurrentUser()
    return user?.role === 'admin'
  }
}

export const simpleAuthService = new SimpleAuthService()